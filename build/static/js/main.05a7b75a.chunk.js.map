{"version":3,"sources":["Error/Error.jsx","Error/ErrorMessages.js","Hospitals/HospitalList.jsx","Services/services.js","Search/SearchHospitals.jsx","Hospitals/Hospitals.js","Hospitals/HospitalDetails.jsx","DoctorDetails/DoctorDetails.jsx","DoctorDetails/Doctors.js","Hospitals/HospitalPage.js","HomePage/HomePage.jsx","AboutPage/AboutPage.jsx","ContactPage/ContactUsMessage.jsx","ContactPage/ContactPage.jsx","Validator/DataValidator.js","Booking/BookingPage.jsx","Login/login.jsx","Logout/logout.js","ViewBooking/ViewBookingDetails.jsx","ViewBooking/ViewBooking.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Error","message","ErrorMessages","DEFAULT","PATIENT_REQUIRED","AGE_REQUIRED","EMAIL_REQUIRED","INVALID_EMAIL","CONTACT_REQUIRED","ADDRESS_REQUIRED","INVALID_DATE","INVALID_AGE","SAME_DAY_DATE","CONTACT_LENGTH","NETWORK_ERROR","LOGIN_REQUIRED","LOGIN_UNAUTHORIZED","UID_MISSING","UID_UNKNOWN","DUPLICATE_APPOINTMENT","HospitalList","props","hospId","hospitalName","address","timings","username","useState","departments","history","useHistory","map","department","key","className","type","onClick","push","convertServiceError","err","Promise","reject","fetchBookings","name","fetch","method","catch","code","then","response","json","SearchHospitals","onSearch","setHospitalName","displayClearFilters","setDisplayClearFilters","autoFocus","placeholder","value","onChange","event","target","onSearchValueChange","Hospitals","user","hospitalDetailsList","useRef","hospitalList","setHospitalList","useEffect","ok","data","current","setHospitalData","useCallback","obj","element","id","filterHospSearchDetails","filter","toLowerCase","includes","HospitalDetails","match","params","setAddress","number","setNumber","setMapUrl","departmentsArray","setDepartmentsArray","setMessage","fetchHospitalsDetails","contactNumber","locationLink","href","rel","DoctorDetails","docId","description","experience","degrees","daysAvailable","bookBtnHide","imgUrl","src","alt","defaultProps","Doctors","doctorsDetailsArray","setDoctorsDetailArray","fetchDoctorDetails","detailsArray","object","HospitalPage","HomePage","AboutPage","ContactUsMessage","ContactPage","style","height","DataValidator","patientName","age","email","dateOfAppointment","errorCount","length","isNaN","String","test","isAfter","Date","BookingPage","setPatientName","setAge","dateOfApt","setDateOfApt","contactNo","setContactNo","doctorName","setDoctorName","setDescription","setImgUrl","qualification","setQualification","setTimings","setExperience","setDaysAvailable","emailAddress","setEmailAddress","setDepartment","onInputChange","setValue","fetchBookingPage","doctor","hospital","headers","Headers","body","JSON","stringify","date","submitAppointment","Login","setUserName","disabled","setDisabled","setIsLoggedIn","error","e","input","fetchLogin","setUser","Logout","setError","ViewBookingDetails","updateBookingData","bookingList","setErrorMes","cancelBooking","fetchCancelBooking","data-id","ViewBookings","bookings","setBookings","App","to","path","exact","component","render","ViewBooking","isLoggedIn","routerProps","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.05a7b75a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Error = ({message}) => (\r\n  <div><span>{message}</span></div>\r\n);\r\nexport default Error;\r\n","const ErrorMessages = {\r\n    DEFAULT: 'Oh no!  Something went wrong, please try again',\r\n    PATIENT_REQUIRED: 'Patient Name is Required',\r\n    AGE_REQUIRED: 'Age is Required',\r\n    EMAIL_REQUIRED: 'Email Address is Required',\r\n    INVALID_EMAIL:'Invalid Email',\r\n    CONTACT_REQUIRED: 'Contact Number is Required',\r\n    ADDRESS_REQUIRED: 'Address is Required',\r\n    INVALID_DATE:'Please Select Valid Date',\r\n    INVALID_AGE:'Invalid Age',\r\n    SAME_DAY_DATE:'We Cannot Book Same Day Appointment',\r\n    CONTACT_LENGTH:'Contact number cannot be more than 10 digits',\r\n    NETWORK_ERROR: 'There was a problem reaching your network, please try again',\r\n    LOGIN_REQUIRED: 'You must be logged in to view this content',\r\n    LOGIN_UNAUTHORIZED: 'Invalid Username',\r\n    UID_MISSING: 'UID is missing',\r\n    UID_UNKNOWN: 'UID is unknown',\r\n    DUPLICATE_APPOINTMENT:'You cannot book appointment again for same doctor.'\r\n};\r\n\r\nexport default ErrorMessages;","import React, {useState} from 'react';\r\nimport './Hospitals.css';\r\nimport {useHistory}  from \"react-router-dom\";\r\nimport Error from \"../Error/Error\";\r\nimport  \"../Error/ErrorMessages\";\r\nconst HospitalList = (props) => {\r\n    const {hospId, hospitalName,address, timings,username} = props;\r\n    const [message, setMessage] = useState('');\r\n    let {departments} = props;\r\n    const history = useHistory();\r\n    departments = departments.map((department) => (\r\n        <div key={department} className=\"dept-shape\">{department}</div>\r\n    ));\r\n\r\n    return (\r\n        <div className=\"hospital-list\">\r\n            <div className=\"row\">\r\n                <div className=\"left-list\">\r\n                    <div className=\"name\"> {hospitalName} </div>\r\n                    <div className=\"address\"> {address} </div>\r\n                    <div className=\"dept\">{departments} </div>\r\n                </div>\r\n                <div className=\"right-list\">\r\n                    <div className=\"timings\">{timings} </div>\r\n                    <button type=\"btn\" className=\"book-btn\" onClick={() => history.push(`/hospital/${hospId}/${username}`)}>Book Appointment</button>\r\n                </div>\r\n                <div className=\"error-mess\"><Error message={message}/></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default HospitalList;\r\n","const convertServiceError = (err) => Promise.reject(err);\r\nexport const fetchLoginStatus = () => {\r\n    return fetch('/session', {\r\n        method: 'GET',\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'NETWORK_ERROR'});\r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                return response.json().then(convertServiceError);\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\nexport const fetchLogin = ({username}) => {\r\n    return fetch('/loginUser', {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n            'content-type': 'application/json',\r\n        }),\r\n        body: JSON.stringify({ username }),\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'NETWORK_ERROR'});\r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                return response.json().then(convertServiceError);\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const fetchLogout = (username, setIsLoggedin) => {\r\n    return fetch('/session', {\r\n        method: 'DELETE',\r\n    })\r\n        .catch( (err) => {\r\n            return Promise.reject({code: 'NETWORK_ERROR'});\r\n        })        .then(response => {\r\n            return response.ok;\r\n        });\r\n};\r\nexport const fetchHospitals = (name) => {\r\n        return fetch('/hospitals', {\r\n        method: 'GET',\r\n    }).catch( () => {\r\n            return Promise.reject({code: 'NETWORK_ERROR'});\r\n        }).then(response => {\r\n            if (!response.ok) {\r\n                return response.json().then(convertServiceError);\r\n            }return response.json();\r\n    });\r\n};\r\nexport const fetchHospitalsDetails = (hospId,name) => {\r\n     return fetch(`/hospital/${hospId}/${name}`, {\r\n        method: 'GET',\r\n    }).catch( () => {\r\n        return Promise.reject({code: 'NETWORK_ERROR'});\r\n    }).then(response => {\r\n        if (!response.ok) {\r\n            return response.json().then(convertServiceError);\r\n        }return response.json();\r\n    });\r\n};\r\n\r\nexport const fetchDoctorDetails = (hospId,name) => {\r\n    return fetch(`/doctors/${hospId}/${name}`, {\r\n        method: 'GET',\r\n    }).catch( () => {\r\n        return Promise.reject({code: 'NETWORK_ERROR'});\r\n    }).then(response => {\r\n        if (!response.ok) {\r\n            return response.json().then(convertServiceError);\r\n        }return response.json();\r\n    });\r\n};\r\n\r\nexport const fetchBookingPage = (hospId,docId,name) => {\r\n    return fetch(`/doctors/${hospId}/${docId}/${name}`, {\r\n        method: 'GET',\r\n    }).catch( () => {\r\n        return Promise.reject({code: 'NETWORK_ERROR'});\r\n    }).then(response => {\r\n        if (!response.ok) {\r\n            return response.json().then(convertServiceError);\r\n        }return response.json();\r\n    });\r\n};\r\n\r\nexport const submitAppointment = (hospId,docId,username,patientName,address,age,emailAddress,contactNo,dateOfApt,hospitalName,doctorName,timings) => {\r\n    return fetch(`/book-appointment/${hospId}/${docId}/${username}`, {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n            'content-type': 'application/json',\r\n        }),\r\n        body: JSON.stringify({\r\n            patientName: patientName,\r\n            address,\r\n            age,\r\n            emailAddress,\r\n            contactNo: contactNo,\r\n            date: dateOfApt,\r\n            hospitalName:hospitalName,\r\n            doctorName:doctorName,\r\n            timings:timings,\r\n        }),\r\n    }) .catch( (err) => {\r\n        return Promise.reject({code: 'NETWORK_ERROR'});\r\n    }) .then(response => {\r\n        if (!response.ok) {\r\n            return response.json().then(convertServiceError);\r\n        }return response.json();\r\n    });\r\n};\r\n\r\nexport const fetchBookings = (name) => {\r\n    return fetch('/bookings/'+name, {\r\n        method: 'GET',\r\n    }).catch( () => {\r\n        return Promise.reject({code: 'NETWORK_ERROR'});\r\n    }).then(response => {\r\n        return response.json();\r\n    });\r\n};\r\n\r\nexport const fetchCancelBooking = (name, docId) => {\r\n    return fetch(`/cancel-booking/${name}/${docId}`, {\r\n        method: 'DELETE',\r\n    }).catch( (err) => {\r\n            return Promise.reject({code: 'NETWORK_ERROR'});\r\n        })        .then(response => {\r\n            return response.ok;\r\n        });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport './Search.css';\r\n\r\nconst SearchHospitals = (props) => {\r\n    const {onSearch, hospitalName,setHospitalName} = props;\r\n    const [displayClearFilters, setDisplayClearFilters] = useState(false);\r\n    const onSearchValueChange = (event) => {\r\n        setHospitalName(event.target.value);\r\n        setDisplayClearFilters(true);\r\n        onSearch(event.target.value);\r\n    };\r\n    const clearSearch = () => {\r\n        setHospitalName('');\r\n        setDisplayClearFilters(false);\r\n        const updatedHospitalName = '';\r\n        onSearch(updatedHospitalName);\r\n    };\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input type=\"text\" className=\"search-text\" autoFocus placeholder=\"Enter hospital name\" value={hospitalName} onChange={(event) => onSearchValueChange(event)}/>\r\n            </div>\r\n            {\r\n                displayClearFilters? <button type=\"btn\" onClick={clearSearch} className=\"clear-btn\">Clear Search</button> : null\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default SearchHospitals;\r\n","import React, { useState, useEffect, useRef, useCallback,} from 'react';\r\nimport HospitalList from './HospitalList';\r\nimport {fetchHospitals} from \"../Services/services\";\r\nimport SearchHospitals from '../Search/SearchHospitals';\r\nimport './Hospitals.css';\r\n\r\nconst Hospitals = ({props}) => {\r\n    const username = props.user;\r\n    const hospitalDetailsList = useRef([]);\r\n    const [hospitalName, setHospitalName] = useState('');\r\n    const [hospitalList, setHospitalList] = useState([]);\r\n    useEffect(() => {\r\n        fetchHospitals(username)\r\n            .then((data) => {\r\n                hospitalDetailsList.current = data;\r\n                setHospitalData(hospitalDetailsList.current);\r\n            });\r\n    }, [setHospitalData]);\r\n\r\n    const setHospitalData = useCallback((obj) => {\r\n        setHospitalList(obj.map((element) => (\r\n            <HospitalList\r\n                username={username}\r\n                hospId={element.id}\r\n                key={element.id}\r\n                hospitalName={element.hospitalName}\r\n                address={element.address}\r\n                departments={element.departments}\r\n                timings={element.timings}\r\n            />\r\n        )));\r\n    });\r\n    const onSearch = (data) => {\r\n        const filterHospSearchDetails = hospitalDetailsList.current.filter((obj) => obj.hospitalName.toLowerCase().includes(data.toLowerCase()));\r\n        setHospitalData(filterHospSearchDetails);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className=\"search\">\r\n                    <div className=\"search-description\">Search hospitals by name to book your appointments</div>\r\n                    <SearchHospitals  onSearch={onSearch} setHospitalName={setHospitalName} hospitalName={hospitalName}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"hospital\">\r\n                {hospitalList}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Hospitals;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Hospitals.css';\r\nimport {fetchHospitalsDetails} from \"../Services/services\";\r\nimport {useHistory}  from \"react-router-dom\";\r\nimport ErrorMessages from \"../Error/ErrorMessages\";\r\nimport Error from \"../Error/Error\";\r\n\r\nconst HospitalDetails = (props) => {\r\n    const {hospId,username} = props.match.params;\r\n    const [hospitalName, setHospitalName] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const [map, setMapUrl] = useState('');\r\n    const [departmentsArray, setDepartmentsArray] = useState([]);\r\n    const history=useHistory();\r\n    const [message, setMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        fetchHospitalsDetails(hospId,username)\r\n            .then((data) => {\r\n                setAddress(data[0].address);\r\n                setHospitalName(data[0].hospitalName);\r\n                setNumber(data[0].contactNumber);\r\n                setMapUrl(data[0].locationLink);\r\n                const {departments} = data[0];\r\n                setDepartmentsArray(departments.map((department) => (\r\n                    <div key={department} className=\"dept-shape\">\r\n                        {department}\r\n                    </div>\r\n                )));\r\n            })\r\n            .catch((err) => setMessage(ErrorMessages[err.code] || err.code || ErrorMessages['DEFAULT']));}, [hospId]);\r\n\r\n    return (\r\n        <div className=\"hospital-details-container\">\r\n            <div className=\"left\">\r\n                <div className=\"hospital-name\">\r\n                    {hospitalName}\r\n                </div>\r\n                <div className=\"hospital-address\">\r\n                    {address}\r\n                </div>\r\n                <div className=\"dept-array\">\r\n                    {departmentsArray}\r\n                </div>\r\n                <div className=\"back-btn\">\r\n                   <button type=\"btn\" onClick={() => history.push(`/hospitals`)} >Back to hospital list</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"right\">\r\n                <div className=\"call-now\">\r\n                    <a href={`tel:${number}`}><button className=\"call-now-btn\" type=\"btn\">Click here to call </button></a>\r\n                </div>\r\n                <div className=\"direction\">\r\n                   <a href={map} rel=\"noopener noreferrer\" target=\"_blank\"><button className=\"get-directions-btn\" type=\"btn\">Get Directions</button></a>\r\n                </div>\r\n            </div>\r\n            <div className=\"error-mess\"><Error message={message}/></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HospitalDetails;\r\n","import React from 'react';\r\n\r\nconst DoctorDetails = (props) => {\r\n    const {username,history,hospId,docId, name, description, experience,timings, degrees, daysAvailable, department, bookBtnHide, imgUrl} = props;\r\n    return (\r\n        <div className=\"details\">\r\n                <div className=\"img-div\"><img src={imgUrl} className=\"doc-img\" alt=\"image\" /> </div>\r\n                <div className=\"detail-div\">\r\n                    <div className=\"detail-body\">\r\n                        <h5 className=\"doctor-title\">{name}</h5>\r\n                        <p className=\"detail-text\">{degrees}</p>\r\n                        <div className=\"detail-text \">Department:{department} </div>\r\n                        <p className=\"detail-text\">Experience:{experience}</p>\r\n                        <p className=\"detail-text\">{description}</p>\r\n                        <p className=\"detail-text\">Days Available:{' '}{daysAvailable}<br />Timings: {' '}{timings}</p>\r\n                        {bookBtnHide ? null : <button type=\"btn\" onClick={() => history.push(`/doctors/${hospId}/${docId}/${username}`)}>Book Appointment</button>}\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nDoctorDetails.defaultProps = {\r\n    bookBtnHide: false,\r\n};\r\n\r\nexport default DoctorDetails;\r\n","import React, { useState, useEffect } from 'react';\r\nimport DoctorDetails from './DoctorDetails';\r\nimport {fetchDoctorDetails} from \"../Services/services\";\r\nimport './Doctors.css';\r\nimport ErrorMessages from \"../Error/ErrorMessages\";\r\n\r\nconst Doctors = (props) => {\r\n    const {history, match } = props;\r\n    const {hospId ,username} = match.params;\r\n    const [message, setMessage] = useState('');\r\n    const [doctorsDetailsArray, setDoctorsDetailArray] = useState([]);\r\n    useEffect(() => {\r\n        fetchDoctorDetails(hospId,username)\r\n            .then((data) => {\r\n                const detailsArray = data.map((object) => {\r\n                    return (\r\n                    <DoctorDetails\r\n                            username={username}\r\n                            history={history}\r\n                            hospId={hospId}\r\n                            docId={object.id}\r\n                            name={object.name}\r\n                            imgUrl={object.imgUrl}\r\n                            degrees={object.degrees}\r\n                            department={object.department}\r\n                            experience={object.experience}\r\n                            description={object.description}\r\n                            daysAvailable={object.daysAvailable}\r\n                            timings={object.timings}\r\n                        />\r\n                    );\r\n                });\r\n                setDoctorsDetailArray(detailsArray);\r\n\r\n            }) .catch((err) => setMessage(ErrorMessages[err.code] || err.code || ErrorMessages['DEFAULT']));\r\n    }, [hospId, history]);\r\n\r\n   return (\r\n        <div className=\"doctors-details\">\r\n            <div className=\"heading\">Doctors</div>\r\n            <div className=\"subheading\">List of all doctors available in this hospital </div>\r\n                 {doctorsDetailsArray}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Doctors;\r\n","import React from 'react';\r\nimport HospitalDetails from '../Hospitals/HospitalDetails';\r\nimport Doctors from '../DoctorDetails/Doctors';\r\n\r\nconst HospitalPage = (props) => {\r\n    const { history, match ,username} = props;\r\n    return (\r\n        <div>\r\n            <HospitalDetails match={match}  username={username} />\r\n            <Doctors history={history} match={match} username={username} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HospitalPage;\r\n","import React from \"react\";\r\nimport  \"./HomePage.css\";\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <div className=\"home-page\">\r\n      <img\r\n        className=\"home-img\" src=\"/images/homepage.jpg\"  alt=\"homepage\"  />\r\n      <h1 className=\"home-title\">Welcome to Virtual Doctor Appointment Booking System!!!</h1>\r\n      <p className=\"home-text\">\r\n       We are here to help you 24/7.\r\n      </p>\r\n      <p className=\"home-text\">Book appointment with your recommended doctor</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport \"./AboutPage.css\";\r\n\r\nconst AboutPage = () => {\r\n  return (\r\n    <section className=\"about-page\">\r\n      <img className=\"about-img\" src=\"/images/homepage.jpg\" alt=\"homepage\" />\r\n      <h1 className=\"about-title\">About us</h1>\r\n      <p className=\"about-detail\">\r\n          We are your partner in total health and wellness, 24/7.\r\n          We are your partner in total health and wellness. And we’re here for you 24/7 – caring for your body and mind.\r\n          As a global health service company, Appointment Plus mission is to improve the health, well-being, and peace of mind.\r\n          We make it easy to get care – letting you choose how, when, and where you want it.\r\n          By using this app you can book appointment with your recommended doctor 24/7.\r\n          Our values are the core of our culture.\r\n      </p>\r\n      <h2 className=\"about-title\">Customer and Patients</h2>\r\n      <p className=\"about-detail\">\r\n          We care deeply about our customers, patients, and coworkers\r\n          Our Health Accelerated: Life ConnectedSM approach integrates the physical, emotional, financial, social, and environmental aspects of health and well-being.\r\n      </p>\r\n       <h2 className=\"about-title\">We create a better future–together</h2>\r\n        <p className=\"about-detail\">\r\n            Through Appointment Plus, we help the underserved overcome barriers to health and improve access to care.\r\n        </p>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AboutPage;\r\n","import React from 'react';\r\n\r\nconst ContactUsMessage = ({message}) => (\r\n  <div><span>{message}</span></div>\r\n);\r\nexport default ContactUsMessage;\r\n","import React, {useState} from \"react\";\r\nimport  \"./ContactPage.css\";\r\nimport ContactUsMessage from \"./ContactUsMessage\";\r\n\r\nconst ContactPage = () => {\r\n    const [message, setMessage] = useState('');\r\n    return (\r\n    <div className=\"contact-page\">\r\n      <h1 className=\"contact-title\">Contact Us:</h1>\r\n      <div><input className=\"contact-form\" type=\"contact\" id=\"first-name\" name=\"firstname\" placeholder=\"Enter your first name\"/></div>\r\n      <div><input className=\"contact-form\" type=\"contact\" id=\"last-name\" name=\"lastname\" placeholder=\"Enter your last name\" /></div>\r\n      <div>\r\n        <select className=\"contact-form\" id=\"country\" name=\"country\">\r\n          <option value=\"USA\">USA</option>\r\n          <option value=\"Canada\">Canada</option>\r\n          <option value=\"Australia\">Australia</option>\r\n          <option value=\"India\">India</option>\r\n          <option value=\"UK\">UK</option>\r\n        </select>\r\n      </div>\r\n      <textarea  className=\"contact-form\" id=\"subject\" name=\"subject\" placeholder=\"Enter Subject\"  style={{height: \"200px\"}} />\r\n      <div className=\"submit\">\r\n        <button className=\"submit-button\" type=\"btn\" onClick={() => setMessage(\"You have submitted the details successfully! We will contact you shortly!!\")}>Submit</button>\r\n      </div>\r\n        <div className=\"contact-mess\"><ContactUsMessage message={message}/></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactPage;\r\n","import isAfter from 'date-fns/isAfter';\r\nimport ErrorMessages from \"../Error/ErrorMessages\";\r\n\r\nconst DataValidator = (patientName,age,address,contactNumber,email,dateOfAppointment,setMessage) => {\r\n    let errorCount = 0;\r\n    const regExp = /^([A-Za-z0-9_\\-.])+@([A-Za-z0-9_\\-.])+\\.([A-Za-z]{2,4})$/;\r\n    if (patientName === ''|| patientName === null) {\r\n        setMessage(ErrorMessages.PATIENT_REQUIRED);\r\n        errorCount += 1;\r\n    }else if (age === '' || age === 0  || age === null) {\r\n        setMessage(ErrorMessages.AGE_REQUIRED);\r\n        errorCount += 1;\r\n    }else if (age.length > 3 ||isNaN(age)) {\r\n        setMessage(ErrorMessages.INVALID_AGE);\r\n        errorCount += 1;\r\n    }else if (address === null || address === '') {\r\n        setMessage(ErrorMessages.ADDRESS_REQUIRED);\r\n        errorCount += 1;\r\n    } else if (isNaN(contactNumber) || contactNumber === '') {\r\n        setMessage(ErrorMessages.CONTACT_REQUIRED);\r\n        errorCount += 1;\r\n    } else if (String(contactNumber).length !== 10 ) {\r\n        setMessage(ErrorMessages.CONTACT_LENGTH);\r\n        errorCount += 1;\r\n      } else if (email === '') {\r\n        setMessage(ErrorMessages.EMAIL_REQUIRED);\r\n        errorCount += 1;\r\n    }else if (regExp.test(email) === false) {\r\n        setMessage(ErrorMessages.INVALID_EMAIL);\r\n        errorCount += 1;\r\n     }else if (!isAfter(new Date(dateOfAppointment), new Date())) {\r\n        setMessage(ErrorMessages.INVALID_DATE);\r\n        errorCount += 1;\r\n    }if (errorCount === 0) {\r\n        return true;}\r\n    return false;\r\n};\r\n\r\nexport default DataValidator;","import React, { useState, useEffect } from 'react';\r\nimport {fetchBookingPage,submitAppointment} from \"../Services/services\";\r\nimport {useHistory}  from \"react-router-dom\";\r\nimport DoctorDetails from \"../DoctorDetails/DoctorDetails\";\r\nimport Error from \"../Error/Error\"\r\nimport  '../Error/Error.css'\r\nimport './BookingPage.css';\r\nimport DataValidator from \"../Validator/DataValidator\"\r\nimport ErrorMessages from \"../Error/ErrorMessages\";\r\n\r\nconst BookingPage = (props) => {\r\n    const { hospId, docId ,username} = props.match.params;\r\n    const history=useHistory();\r\n    const [patientName, setPatientName] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [age, setAge] = useState('');\r\n    const [dateOfApt, setDateOfApt] = useState('');\r\n    const [contactNo, setContactNo] = useState('');\r\n    const [doctorName, setDoctorName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [imgUrl, setImgUrl] = useState('');\r\n    const [qualification, setQualification] = useState('');\r\n    const [timings, setTimings] = useState('');\r\n    const [experience, setExperience] = useState('');\r\n    const [daysAvailable, setDaysAvailable] = useState('');\r\n    const [emailAddress, setEmailAddress] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [department,setDepartment] = useState('');\r\n    const [hospitalName, setHospitalName] = useState('');\r\n    const onInputChange = (event, setValue) => {\r\n        setValue(event.target.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchBookingPage(hospId,docId,username)\r\n         .then((data) => {\r\n                setDoctorName(data.doctor[0].name);\r\n                setExperience(data.doctor[0].experience);\r\n                setImgUrl(data.doctor[0].imgUrl);\r\n                setQualification(data.doctor[0].qualification);\r\n                setDescription(data.doctor[0].description);\r\n                setTimings(data.doctor[0].timings);\r\n                setDepartment(data.doctor[0].department);\r\n                setDaysAvailable(data.doctor[0].daysAvailable);\r\n                setHospitalName(data.hospital[0].hospitalName);\r\n         });\r\n    }, [docId, hospId]);\r\n\r\n    const bookAppointment = () => {\r\n        if (DataValidator(patientName,age,address,contactNo,emailAddress,dateOfApt,setMessage)) {\r\n            setMessage('Booking Appointment. Please wait..');\r\n            submitAppointment(hospId,docId,username,patientName,address,age,emailAddress,contactNo,dateOfApt,hospitalName,doctorName,timings)\r\n               .then((data) => {\r\n                   if (data === 'success'){\r\n                       setMessage('Your appointment has been booked successfully. Please check your email for confirmation');\r\n                       setPatientName('');\r\n                       setAge('');\r\n                       setAddress('');\r\n                       setContactNo('');\r\n                       setDateOfApt('');\r\n                       setEmailAddress('');\r\n                   }else{\r\n                       setMessage('There was some problem while sending email please try again.');\r\n                   }\r\n                }) .catch((err) => setMessage(ErrorMessages[err.code] || err.code || ErrorMessages['DEFAULT']));}\r\n    };\r\n    return (\r\n        <div className=\"patient-booking-form\">\r\n            <DoctorDetails history={history}  id={docId}   key={docId}  name={doctorName}  degrees={qualification}  department={department}\r\n             experience={experience}  description={description} daysAvailable={daysAvailable}  timings={timings} imgUrl={imgUrl}  bookBtnHide />\r\n            <div className=\"heading\">Enter Patients Booking Details:* </div>\r\n            <div className=\"app-heading\" >You are booking an appointment for doctor working in hospital: &nbsp;{hospitalName}</div>\r\n            <div className=\"label-date\">Enter Patient's name:*</div>\r\n            <div><input type=\"text\" className=\"input-text-field\" placeholder=\"name: \"  value={patientName} onChange={(event) => { onInputChange(event, setPatientName); }}/></div>\r\n            <div className=\"label-date\">Enter patient's age:*</div>\r\n            <div><input type=\"text\" placeholder=\"age: \" className=\"input-text-field\" value={age} onChange={(event) => { onInputChange(event, setAge); }}/></div>\r\n            <div className=\"label-date\">Enter Patient's Address:*</div>\r\n            <div><input type=\"text\" placeholder=\"address: \" className=\"input-text-field\" value={address} onChange={(event) => { onInputChange(event, setAddress); }}/></div>\r\n            <div className=\"label-date\">Enter Contact Number:*</div>\r\n            <div><input type=\"text\" placeholder=\"number:\" className=\"input-text-field\" value={contactNo} onChange={(event) => { onInputChange(event, setContactNo); }}/></div>\r\n            <div className=\"label-date\">Enter Email Address:*</div>\r\n            <div><input type=\"text\" placeholder=\"email address:\" className=\"input-text-field\" value={emailAddress} onChange={(event) => { onInputChange(event, setEmailAddress); }}/></div>\r\n            <div className=\"label-date\">Please Select Date of Appointment:*</div>\r\n            <div><input type=\"date\" className=\"date-text-field\" value={dateOfApt} onChange={(event) => {onInputChange(event, setDateOfApt); }}/></div>\r\n            <div className=\"error-mess\"><Error message={message}/></div>\r\n            <div className=\"button-book-apt\">\r\n                <div><button type=\"btn\" className=\"book-apt\" onClick={bookAppointment}>Book Appointment</button></div>\r\n                <div><button type=\"btn\" onClick={() => history.push(`/hospitals`)} >Back to hospital list</button></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BookingPage;\r\n","import React, {useEffect, useState} from 'react';\r\nimport { fetchLogin , fetchLoginStatus} from '../Services/services';\r\nimport './login.css';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Error from \"../Error/Error\";\r\nimport ErrorMessages from \"../Error/ErrorMessages\"\r\n\r\nfunction Login({props}){\r\n    const [error, setError] = useState(\"\");\r\n    const [username, setUserName] = useState(\"\");\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [message, setMessage] = useState('');\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        fetchLoginStatus()\r\n            .then(obj => {\r\n                props.setIsLoggedIn(true);\r\n            }).catch((error) => {\r\n                setMessage(error.message);\r\n                props.setIsLoggedIn(false);\r\n            });\r\n    }, []);\r\n\r\n    const performLogin = (() => {\r\n        fetchLogin({username})\r\n            .then( function(response) {\r\n                props.setUser(username);\r\n                props.setIsLoggedIn(true);\r\n                history.push(`/hospitals`);\r\n            })\r\n            .catch((err) =>{\r\n                setMessage(ErrorMessages[err.code] || err.code || ErrorMessages['DEFAULT']);\r\n                props.setIsLoggedIn(false);\r\n            });\r\n    });\r\n\r\n    const handleInput = ((input) => {\r\n        setUserName(input);\r\n        if(input === \"\"){\r\n            setDisabled(true);\r\n        }else{\r\n            setDisabled(false);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className = \"login-page\">\r\n            <div className=\"login\">\r\n                <div>\r\n                    <img className=\"logo\" src=\"/images/logo.jpg\"  alt=\"homepage\"  />\r\n                    <h1 className=\"login-header\">Customer Login:</h1>\r\n                </div>\r\n                <div className=\"input-holder\">\r\n                    <input className=\"form-control basic-input selector\"  type=\"username\" placeholder=\"Enter username\" value={username} onChange={e => handleInput(e.target.value)}/>\r\n                </div>\r\n                <div>\r\n                    <button className=\"login-user\" type=\"submit\" disabled={disabled} onClick={performLogin}>Login</button>\r\n                </div>\r\n                <div className=\"error-mess\"><Error message={message}/></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n\r\n","import React, {useState} from 'react';\r\nimport {fetchLogout} from \"../Services/services\";\r\nimport {useHistory} from \"react-router-dom\";\r\nfunction Logout({props}){\r\n    const [error, setError] = useState(\"\");\r\n    const history = useHistory();\r\n    const performLogout = function(){\r\n        fetchLogout(props.user)\r\n            .then( function(response){\r\n            props.setIsLoggedIn(false);\r\n            props.setUser(\"\");\r\n            history.push(`/`);\r\n        }).catch(error => {setError(error.message)});\r\n            props.setUser(\"\");\r\n    };\r\n    return (\r\n        <div>{performLogout()}</div>\r\n    );\r\n}\r\nexport default Logout;\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport '../ViewBooking/ViewBookings.css';\r\nimport {fetchBookings, fetchCancelBooking} from \"../Services/services\";\r\nimport Error from \"../Error/Error\";\r\n\r\nconst ViewBookingDetails = (props) => {\r\n    const {username,patientName,hospitalName,doctorName,timings,docId,updateBookingData,bookingList} = props;\r\n    const [errorMes, setErrorMes] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n    if(docId === '' || docId === 0  || docId === null){\r\n        setMessage('No Bookings Found')\r\n    }\r\n    const cancelBooking = function(docId){\r\n        setMessage('');\r\n        fetchCancelBooking(username,docId)\r\n            .then(function(response){\r\n                setMessage('Your booking has been cancelled.');\r\n            }).catch(error => {setErrorMes(error.message)});\r\n        fetchBookings(username)\r\n            .then((data) => {\r\n                if(data){\r\n                    bookingList.current = data;\r\n                    updateBookingData(bookingList.current);\r\n                }else{\r\n                    setMessage('No Bookings Found')\r\n                }});\r\n       };\r\n    return (\r\n        <div className=\"hospital-list\">\r\n            <div className=\"row\">\r\n                <div className=\"left-list\">\r\n                    <div className=\"booking-user\">User Name: {username} </div>\r\n                    <div className=\"booking-hospital\">Hospital Name: {hospitalName} </div>\r\n                    <div className=\"booking-doctor\">Doctor Name: {doctorName} </div>\r\n                    <div className=\"booking-timing\">Timings: {timings} </div>\r\n                    <button type=\"btn\" data-id=\"${docId}\" className=\"cancel-booking\" onClick={() => cancelBooking(docId)}>Cancel Booking</button>\r\n                    <div className=\"error-mess\"><Error message={message}/></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewBookingDetails;\r\n","import React, { useState, useEffect, useRef, useCallback} from 'react';\r\nimport { fetchBookings } from \"../Services/services\";\r\nimport ViewBookingDetails from '../ViewBooking/ViewBookingDetails'\r\nimport Error from \"../Error/Error\";\r\nimport  \"./ViewBookings.css\";\r\n\r\nconst ViewBookings = ({props}) => {\r\n    const user = props.user;\r\n    const bookingList = useRef([]);\r\n    const [hospitalName, setHospitalName] = useState('');\r\n    const [bookings, setBookings] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        fetchBookings(user)\r\n            .then((data) => {\r\n                if(data){\r\n                    bookingList.current = data;\r\n                    updateBookingData(bookingList.current);\r\n                }else{\r\n                    setMessage('No Bookings Found')\r\n                }});\r\n    }, [updateBookingData]);\r\n\r\n    const updateBookingData = useCallback((obj) => {\r\n        setBookings(obj.map((element) => (\r\n            <ViewBookingDetails\r\n                username={user}\r\n                patientName={user}\r\n                doctorName={element.doctor[0].name}\r\n                timings={element.doctor[0].timings}\r\n                docId={element.doctor[0].id}\r\n                hospitalName={element.doctor[0].hospitalName}\r\n                updateBookingData={updateBookingData}\r\n                bookingList={bookingList}\r\n            />)));\r\n    });\r\n    return (\r\n        <div>\r\n            <div className=\"Booking History: \">\r\n                 {bookings == '' ? <div className=\"error-mess\"><Error message={\"No bookings found\"}/></div> :bookings}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewBookings;\r\n","import React, { useState } from 'react';\r\nimport {BrowserRouter as Router,Switch,Link,Route } from \"react-router-dom\";\r\nimport Hospitals from './Hospitals/Hospitals';\r\nimport HospitalPage from './Hospitals/HospitalPage';\r\nimport HomePage from \"./HomePage/HomePage.jsx\";\r\nimport AboutPage from \"./AboutPage/AboutPage.jsx\";\r\nimport ContactPage from \"./ContactPage/ContactPage.jsx\";\r\nimport BookingPage from \"./Booking/BookingPage\";\r\nimport Login from './Login/login';\r\nimport Logout from \"./Logout/logout\";\r\nimport ViewBookings from \"./ViewBooking/ViewBooking\";\r\nimport  \"./navbar.css\";\r\nimport './App.css'\r\nlet App = props => {\r\n    const [user, setUser] = useState(\"\");\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    if(user !== \"\"){\r\n        return (\r\n            <Router>\r\n                <header>\r\n                    <nav>\r\n                        <Link className=\"nav-tab\" to=\"/about\">About Us</Link>\r\n                        <Link className=\"nav-tab\" to=\"/contact\">Contact Us</Link>\r\n                        <Link className=\"nav-tab\" to=\"/hospitals\">Hospital List</Link>\r\n                        <Link className=\"nav-tab\" to=\"/view-bookings\">View Bookings</Link>\r\n                        <Link className=\"nav-tab\" to=\"/logout\">Logout</Link>\r\n                    </nav>\r\n                </header>\r\n                <Switch>\r\n                    <Route path=\"/about\" exact component={AboutPage} />\r\n                    <Route path=\"/contact\" exact component={ContactPage} />\r\n                    <Route path=\"/view-bookings\" render={(props) => (<ViewBookings {...props} props={{user:user,setUser:setUser}} />)} />\r\n                    <Route path=\"/logout\" render={(props) => (<Logout {...props} props={{user:user,setUser:setUser,isLoggedIn:false,setIsLoggedIn:setIsLoggedIn}} />)} />\r\n                </Switch>\r\n                <Route exact path=\"/hospitals\" render={(routerProps) => {\r\n                    return <Hospitals {...routerProps} props={{user:user,setUser:setUser}} />}} />\r\n                <Route exact path='/hospital/:hospId/:username' render={routerProps => {\r\n                    const hospId = routerProps.match.params.hospId;\r\n                    const username = routerProps.match.params.username;\r\n                    return <HospitalPage {...routerProps} props={{hospId,username}} />;}}/>\r\n                <Route path=\"/doctors/:hospId/:docId/:username\" render={routerProps => {\r\n                    const hospId = routerProps.match.params.hospId;\r\n                    const docId = routerProps.match.params.docId;\r\n                    const username = routerProps.match.params.username;\r\n                    return <BookingPage {...routerProps} props={{hospId,docId,username}} />;\r\n                }}/>\r\n            </Router>\r\n        );\r\n    }else{\r\n        return (\r\n            <Router>\r\n                <header>\r\n                    <nav>\r\n                        <Link to=\"/home\"><img className=\"logo\" src=\"/images/logo.jpg\" alt=\"Appointment Plus\"/></Link>\r\n                        <Link className=\"title\" to=\"/\">Appointment Plus</Link>\r\n                        <Link className=\"nav-tab\" to=\"/about\">About Us</Link>\r\n                        <Link className=\"nav-tab\" to=\"/contact\">Contact Us</Link>\r\n                        <Link className=\"nav-tab\" to=\"/login\">Login</Link>\r\n                    </nav>\r\n                </header>\r\n                <Switch>\r\n                    <Route path=\"/\" exact component={HomePage} />\r\n                    <Route path=\"/about\" exact component={AboutPage} />\r\n                    <Route path=\"/contact\" exact component={ContactPage} />\r\n                    <Route path=\"/login\" render={(props) => (<Login {...props} props={{user:user,setUser:setUser,isLoggedIn:true,setIsLoggedIn:setIsLoggedIn}} />)} />\r\n                </Switch>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}